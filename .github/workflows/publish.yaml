# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Determine package to build from tag
        id: where
        shell: bash
        run: |
          TAG="${{ github.event.release.tag_name }}"
          case "$TAG" in
            obshell-mcp-*)
              echo "src_dir=src/obshell_mcp_server" >> "$GITHUB_OUTPUT"
              ;;
            oceanbase-mcp-*)
              echo "src_dir=src/oceanbase_mcp_server" >> "$GITHUB_OUTPUT"
              ;;
            # add more packages here
            *)
              echo "Unsupported tag: $TAG" >&2
              exit 1
              ;;
          esac

      - name: Build selected package
        run: |
          rm -rf dist
          mkdir -p dist
          python -m build "${{ steps.where.outputs.src_dir }}" -o dist

      - name: Upload dists
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/


  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      id-token: write

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1